"""
–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (UI) –Ω–∞ –±–∞–∑–µ tkinter
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Ç–æ–≤
"""

import tkinter as tk
from tkinter import ttk, scrolledtext
import asyncio
from typing import Callable
from db import Database
from env_loader import env_loader
from logger import LogLevel

class UIWorkflow:
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ UI —Å–∏—Å—Ç–µ–º—ã
    –°–æ–¥–µ—Ä–∂–∏—Ç 3 –≤–∫–ª–∞–¥–∫–∏: Services, Bot Control, Monitor
    """

    def __init__(self, db: Database, on_start: Callable, on_stop: Callable):
        self.db = db
        self.on_start = on_start
        self.on_stop = on_stop

        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = tk.Tk()
        self.root.title("Telegram Bot RAG System")
        self.root.geometry("1100x750")

        # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.recent_messages = []
        self.max_recent_messages = 10

        self.create_ui()
        self.update_service_status()

    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ 1: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        services_frame = ttk.Frame(notebook)
        notebook.add(services_frame, text='Services')
        self.create_services_panel(services_frame)

        # –í–∫–ª–∞–¥–∫–∞ 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
        control_frame = ttk.Frame(notebook)
        notebook.add(control_frame, text='Bot Control')
        self.create_control_panel(control_frame)

        # –í–∫–ª–∞–¥–∫–∞ 3: –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π
        monitor_frame = ttk.Frame(notebook)
        notebook.add(monitor_frame, text='Monitor')
        self.create_monitor_panel(monitor_frame)

    def create_services_panel(self, parent):
        """
        –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        """
        services = [
            ('OpenRouter', 'OPENROUTER_API_KEY'),
            ('Pinecone', 'PINECONE_API_KEY'),
            ('Qdrant', 'QDRANT_API_KEY'),
            ('Translator', 'TRANSLATE_API_KEY'),
            ('Telegram', 'TELEGRAM_BOT_TOKEN'),
            ('GitHub', 'GITHUB_TOKEN'),
            ('GitLab', 'GITLAB_TOKEN')
        ]

        ttk.Label(parent, text="Service Status", font=('Arial', 14, 'bold')).pack(pady=10)

        self.service_indicators = {}

        for service_name, env_key in services:
            frame = ttk.Frame(parent)
            frame.pack(fill='x', padx=20, pady=5)

            ttk.Label(frame, text=service_name, width=15).pack(side='left')

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: üü¢ –∫–ª—é—á –µ—Å—Ç—å, üî¥ –∫–ª—é—á–∞ –Ω–µ—Ç
            indicator = ttk.Label(frame, text='‚óè', font=('Arial', 20))
            indicator.pack(side='left', padx=10)

            self.service_indicators[env_key] = indicator

    def update_service_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        for env_key, indicator in self.service_indicators.items():
            has_key = env_loader.has_key(env_key)
            indicator.config(text='üü¢' if has_key else 'üî¥')

    def create_control_panel(self, parent):
        """
        –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π, –æ–ø—Ü–∏–π –∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        ttk.Label(parent, text="Bot Configuration", font=('Arial', 14, 'bold')).pack(pady=10)

        # –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ä–æ–ª–µ–π
        roles_frame = ttk.LabelFrame(parent, text="Role Blacklist", padding=10)
        roles_frame.pack(fill='x', padx=20, pady=10)

        self.role_vars = {}
        roles = ['TECH', 'FRIEND', 'ADVISOR', 'AGITATOR', 'OPERATOR']

        for role in roles:
            var = tk.BooleanVar(value=self.db.is_blacklisted(role.lower()))
            cb = ttk.Checkbutton(
                roles_frame,
                text=f"Blacklist {role}",
                variable=var,
                command=lambda r=role, v=var: self.toggle_blacklist(r, v)
            )
            cb.pack(anchor='w', pady=2)
            self.role_vars[role] = var

        # –ë–ª–æ–∫ –æ–ø—Ü–∏–π
        options_frame = ttk.LabelFrame(parent, text="Options", padding=10)
        options_frame.pack(fill='x', padx=20, pady=10)

        self.remove_emoji_var = tk.BooleanVar(value=self.db.get_setting('remove_emoji', True))
        ttk.Checkbutton(
            options_frame,
            text="Remove emojis from messages",
            variable=self.remove_emoji_var,
            command=self.save_options
        ).pack(anchor='w', pady=2)

        self.save_msgs_var = tk.BooleanVar(value=self.db.get_setting('SAVE_ALL_MSGS', True))
        ttk.Checkbutton(
            options_frame,
            text="Save all messages",
            variable=self.save_msgs_var,
            command=self.save_options
        ).pack(anchor='w', pady=2)

        self.only_free_var = tk.BooleanVar(value=self.db.get_setting('only_free_llms', True))
        ttk.Checkbutton(
            options_frame,
            text="Use only free LLMs",
            variable=self.only_free_var,
            command=self.save_options
        ).pack(anchor='w', pady=2)

        self.monitor_chat_var = tk.BooleanVar(value=self.db.get_setting('monitor_chat', True))
        ttk.Checkbutton(
            options_frame,
            text="Monitor chat",
            variable=self.monitor_chat_var,
            command=self.save_options
        ).pack(anchor='w', pady=2)

        # –ë–ª–æ–∫ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level_frame = ttk.LabelFrame(parent, text="Log Level", padding=10)
        log_level_frame.pack(fill='x', padx=20, pady=10)

        self.log_level_var = tk.StringVar(value=self.db.get_setting('log_level', 'INFO'))

        for level in ['DEBUG', 'INFO', 'WARNING', 'ERROR']:
            ttk.Radiobutton(
                log_level_frame,
                text=level,
                variable=self.log_level_var,
                value=level,
                command=self.save_options
            ).pack(anchor='w', pady=2)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(parent)
        control_frame.pack(pady=20)

        self.start_btn = ttk.Button(control_frame, text="Start", command=self.start_bot)
        self.start_btn.pack(side='left', padx=5)

        self.stop_btn = ttk.Button(control_frame, text="Stop", command=self.stop_bot, state='disabled')
        self.stop_btn.pack(side='left', padx=5)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        self.status_label = ttk.Label(parent, text="Status: Stopped", font=('Arial', 12))
        self.status_label.pack(pady=10)

    def toggle_blacklist(self, role: str, var: tk.BooleanVar):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if var.get():
            self.db.add_to_blacklist(role.lower())
        else:
            self.db.remove_from_blacklist(role.lower())

    def save_options(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î"""
        self.db.set_setting('remove_emoji', self.remove_emoji_var.get())
        self.db.set_setting('SAVE_ALL_MSGS', self.save_msgs_var.get())
        self.db.set_setting('only_free_llms', self.only_free_var.get())
        self.db.set_setting('monitor_chat', self.monitor_chat_var.get())
        self.db.set_setting('log_level', self.log_level_var.get())

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.start_btn.config(state='disabled')
        self.stop_btn.config(state='normal')
        self.status_label.config(text="Status: Running", foreground='green')
        self.db.set_setting('bot_enabled', True)

        asyncio.create_task(self.on_start())

    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        self.status_label.config(text="Status: Stopped", foreground='red')
        self.db.set_setting('bot_enabled', False)

        asyncio.create_task(self.on_stop())

    def create_monitor_panel(self, parent):
        """
        –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π
        """
        ttk.Label(parent, text="System Monitor", font=('Arial', 14, 'bold')).pack(pady=5)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.Frame(parent)
        stats_frame.pack(fill='x', padx=20, pady=5)

        self.queue_label = ttk.Label(stats_frame, text="Queue size: 0", font=('Arial', 10))
        self.queue_label.pack(side='left', padx=10)

        self.processed_label = ttk.Label(stats_frame, text="Processed: 0", font=('Arial', 10))
        self.processed_label.pack(side='left', padx=10)

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_frame = ttk.LabelFrame(parent, text="Recent Messages", padding=5)
        messages_frame.pack(fill='both', padx=20, pady=5, expand=False)

        self.messages_text = scrolledtext.ScrolledText(messages_frame, height=8, wrap=tk.WORD)
        self.messages_text.pack(fill='both', expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.messages_text.tag_config('incoming', foreground='blue')
        self.messages_text.tag_config('outgoing', foreground='green')
        self.messages_text.tag_config('timestamp', foreground='gray')

        # –õ–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π
        log_frame = ttk.LabelFrame(parent, text="Event Log", padding=5)
        log_frame.pack(fill='both', padx=20, pady=5, expand=True)

        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, wrap=tk.WORD)
        self.log_text.pack(fill='both', expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_text.tag_config('DEBUG', foreground='cyan')
        self.log_text.tag_config('INFO', foreground='green')
        self.log_text.tag_config('WARNING', foreground='orange')
        self.log_text.tag_config('ERROR', foreground='red')

    def add_log(self, level: LogLevel, message: str, component: str = "SYSTEM"):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        """
        level_name = level.name

        # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ–≥–æ–º –¥–ª—è —Ü–≤–µ—Ç–∞
        self.log_text.insert(tk.END, message + '\n', level_name)
        self.log_text.see(tk.END)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)
        lines = int(self.log_text.index('end-1c').split('.')[0])
        if lines > 1000:
            self.log_text.delete('1.0', f'{lines-1000}.0')

    def add_message(self, nick: str, text: str, is_incoming: bool = True):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ Recent Messages
        is_incoming: True - –≤—Ö–æ–¥—è—â–µ–µ, False - –∏—Å—Ö–æ–¥—è—â–µ–µ
        """
        from datetime import datetime
        timestamp = datetime.now().strftime('%H:%M:%S')

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        direction = "‚Üê" if is_incoming else "‚Üí"
        msg_type = 'incoming' if is_incoming else 'outgoing'

        # –í—Å—Ç–∞–≤–∫–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        self.messages_text.insert(tk.END, f"[{timestamp}] ", 'timestamp')
        self.messages_text.insert(tk.END, f"{direction} {nick}: ", msg_type)
        self.messages_text.insert(tk.END, f"{text}\n")
        self.messages_text.see(tk.END)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        lines = int(self.messages_text.index('end-1c').split('.')[0])
        if lines > 50:
            self.messages_text.delete('1.0', f'{lines-50}.0')

    def update_queue_size(self, size: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        self.queue_label.config(text=f"Queue size: {size}")

    def update_processed_count(self, count: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.processed_label.config(text=f"Processed: {count}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ UI"""
        self.root.mainloop()
