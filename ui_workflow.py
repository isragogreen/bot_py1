"""
–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (UI) –Ω–∞ tkinter/ttk.
–¢—Ä–∏ –≤–∫–ª–∞–¥–∫–∏: —Å–µ—Ä–≤–∏—Å—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏, –º–æ–Ω–∏—Ç–æ—Ä.
"""

import tkinter as tk
from tkinter import ttk
from env_loader import get_env
from logger import logger

class UIWorkflow:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
    """

    def __init__(self, main_workflow):
        self.main_workflow = main_workflow
        self.root = tk.Tk()
        self.root.title("Telegram RAG LLM Bot")
        self.root.geometry("900x600")
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.create_widgets()

    def create_widgets(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True)

        # –í–∫–ª–∞–¥–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        frame_services = ttk.Frame(notebook)
        notebook.add(frame_services, text="–°–µ—Ä–≤–∏—Å—ã")
        self._init_services_tab(frame_services)

        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
        frame_bots = ttk.Frame(notebook)
        notebook.add(frame_bots, text="–ë–æ—Ç—ã")
        self._init_bots_tab(frame_bots)

        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        frame_monitor = ttk.Frame(notebook)
        notebook.add(frame_monitor, text="–ú–æ–Ω–∏—Ç–æ—Ä")
        self._init_monitor_tab(frame_monitor)

    def _init_services_tab(self, frame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.
        """
        services = [
            ("OpenRouter", "OPENROUTER_API_KEY"),
            ("Pinecone", "PINECONE_API_KEY"),
            ("Qdrant", "QDRANT_API_KEY"),
            ("Translator", "TRANSLATE_API_KEY"),
            ("Telegram", "TELEGRAM_BOT_TOKEN"),
            ("GitHub/GitLab", "REPO_NAME")
        ]
        for idx, (name, env_key) in enumerate(services):
            key = get_env(env_key)
            status = "üü¢" if key else "üî¥"
            label = ttk.Label(frame, text=f"{name}: {status}")
            label.grid(row=idx, column=0, sticky="w", padx=10, pady=5)

    def _init_bots_tab(self, frame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏.
        """
        roles = ["TECH", "FRIEND", "ADVISOR", "AGITATOR", "OPERATOR"]
        self.role_vars = {}
        for idx, role in enumerate(roles):
            var = tk.BooleanVar()
            chk = ttk.Checkbutton(frame, text=role, variable=var)
            chk.grid(row=idx, column=0, sticky="w", padx=10, pady=5)
            self.role_vars[role] = var

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_start = ttk.Button(frame, text="Start", command=self.on_start)
        btn_stop = ttk.Button(frame, text="Stop", command=self.on_stop)
        btn_save = ttk.Button(frame, text="Save settings", command=self.on_save)
        btn_start.grid(row=0, column=1, padx=10)
        btn_stop.grid(row=1, column=1, padx=10)
        btn_save.grid(row=2, column=1, padx=10)

    def _init_monitor_tab(self, frame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """
        # –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π
        self.log_text = tk.Text(frame, height=15, width=100)
        self.log_text.pack(fill='x', expand=False)
        logger.set_ui_callback(self._ui_log_callback)

        # –û–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤
        self.msg_text = tk.Text(frame, height=10, width=100, bg="#f0f0f0")
        self.msg_text.pack(fill='both', expand=True)

        # –ü—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
        self.status_label = ttk.Label(frame, text="–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–Ω–∏–µ")
        self.status_label.pack(anchor="w", padx=10, pady=5)

    def _ui_log_callback(self, level, msg, component):
        """
        Callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ UI.
        """
        self.log_text.insert(tk.END, f"{msg}\n")
        self.log_text.see(tk.END)

    def on_start(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Start.
        """
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "UI")
        self.main_workflow.start_processing()

    def on_stop(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Stop.
        """
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        self.main_workflow.stop_processing()

    def on_save(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Save settings.
        """
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "UI")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É

    def on_close(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞.
        """
        logger.info("UI –∑–∞–∫—Ä—ã—Ç", "UI")
        self.root.destroy()

    def run(self):
        """
        –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        self.root.mainloop()
